from typing import List


class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        count = [[[0] * 10 for _ in range(9)] for _ in range(3)]

        for row in range(9):
            for col in range(9):
                if board[row][col].isnumeric():
                    num = int(board[row][col])
                    # print(f"row={row}, col={col}, num={num}")
                    if (
                        count[0][row][num] == 0
                        and count[1][col][num] == 0
                        and count[2][row // 3 * 3 + col // 3][num] == 0
                    ):
                        count[0][row][num] += 1
                        count[1][col][num] += 1
                        count[2][row // 3 * 3 + col // 3][num] += 1
                    else:
                        return False
        return True


sol = Solution()
print(
    sol.isValidSudoku(
        board=[
            ["5", "3", ".", ".", "7", ".", ".", ".", "."],
            ["6", ".", ".", "1", "9", "5", ".", ".", "."],
            [".", "9", "8", ".", ".", ".", ".", "6", "."],
            ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
            ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
            ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
            [".", "6", ".", ".", ".", ".", "2", "8", "."],
            [".", ".", ".", "4", "1", "9", ".", ".", "5"],
            [".", ".", ".", ".", "8", ".", ".", "7", "9"],
        ]
    )
)

print(
    sol.isValidSudoku(
        board=[
            ["8", "3", ".", ".", "7", ".", ".", ".", "."],
            ["6", ".", ".", "1", "9", "5", ".", ".", "."],
            [".", "9", "8", ".", ".", ".", ".", "6", "."],
            ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
            ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
            ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
            [".", "6", ".", ".", ".", ".", "2", "8", "."],
            [".", ".", ".", "4", "1", "9", ".", ".", "5"],
            [".", ".", ".", ".", "8", ".", ".", "7", "9"],
        ]
    )
)
