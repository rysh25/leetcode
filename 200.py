from collections import deque


class Solution:
    def numIslands(self, grid: list[list[str]]) -> int:
        """
        '1' (land) と '0' (water) からなるマップを表した m x n の2次元グリッドが渡される。
        島の数を返す。

        BFS で隣接する land をすべて回る。
        その BFS をまだ訪れいていない land が見つかる限り繰り返す。
        BFS の実行成功回数を島の数とする。

        - Time complexity: O(m * n)
        - Space complexity: O(m * n)

        #BFS

        Args:
            grid (list[list[str]]): '1' (land) と '0' (water) からなるマップを表した m x n の2次元グリッドが渡される。

        Returns:
            int: 島の数を返す。
        """
        # print(f"grid={grid}")
        q: deque[tuple[int, int]] = deque()
        n = len(grid)
        m = len(grid[0])
        # print(f"m={m}, n={n}")

        dx = [0, 1, 0, -1]
        dy = [1, 0, -1, 0]

        visited: list[list[bool]] = [[False] * m for _ in range(n)]

        # print(f"visited={visited}")

        def explore_island(x: int, y: int) -> int:
            # print(f"x={x}, y={y}")

            if grid[y][x] != "1" or visited[y][x]:
                return False
            q.append((x, y))
            visited[y][x] = True

            while q:
                cx, cy = q.popleft()

                for i in range(4):
                    nx = cx + dx[i]
                    ny = cy + dy[i]
                    if (
                        0 <= nx < m
                        and 0 <= ny < n
                        and not visited[ny][nx]
                        and grid[ny][nx] == "1"
                    ):
                        # print(f"nx={nx}, ny={ny}")
                        q.append((nx, ny))
                        visited[ny][nx] = True
            return True

        ans = 0

        for y in range(n):
            for x in range(m):
                if explore_island(x, y):
                    ans += 1
                # print(f"visited={visited}")

        return ans


sol = Solution()
print(
    sol.numIslands(
        grid=[
            ["1", "1", "1", "1", "0"],
            ["1", "1", "0", "1", "0"],
            ["1", "1", "0", "0", "0"],
            ["0", "0", "0", "0", "0"],
        ]
    )
)

print(
    sol.numIslands(
        grid=[
            ["1", "1", "0", "0", "0"],
            ["1", "1", "0", "0", "0"],
            ["0", "0", "1", "0", "0"],
            ["0", "0", "0", "1", "1"],
        ]
    )
)

print(sol.numIslands(grid=[["1", "1", "1"], ["0", "1", "0"], ["1", "1", "1"]]))  # 1

print(
    sol.numIslands(
        grid=[
            [
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "0",
                "1",
                "1",
            ],
            [
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
            ],
            [
                "1",
                "0",
                "1",
                "1",
                "1",
                "0",
                "0",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
            ],
            [
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
            ],
            [
                "1",
                "0",
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
            ],
            [
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
            ],
            [
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
            ],
            [
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
            ],
            [
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
            ],
            [
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
            ],
            [
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
            ],
            [
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
            ],
            [
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
            ],
            [
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
            ],
            [
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
            ],
            [
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
            ],
            [
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "1",
                "1",
                "1",
                "1",
                "0",
                "0",
            ],
            [
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
            ],
            [
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
            ],
            [
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
            ],
        ]
    )
)  # 1
